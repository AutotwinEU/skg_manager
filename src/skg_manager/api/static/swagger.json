{
  "swagger": "2.0",
  "info": {
    "title": "SKG Manager for Croma API",
    "version": "v1.0.0"
  },
  "host": "localhost:8080",
  "basePath": "/",
  "tags": [
    {
      "name": "Status",
      "description": "Get status of the running app and the connections"
    },
    {
      "name": "Use Case",
      "description": "Get information about specifics of the use case"
    },
    {
      "name": "Retrieval",
      "description": "Retrieve data from the Neo4j Database"
    },
    {
      "name": "Manage Database - SKG Manager",
      "description": "Manage Neo4j Database"
    },
    {
      "name": "OCED-PG - SKG Manager",
      "description": "Load and Transform Records"
    },
    {
      "name": "Performance",
      "description": "Calculates performance statistics"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Status"
        ],
        "description": "Returns message showing app is up",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        }
      }
    },
    "/use_case": {
      "get": {
        "tags": [
          "Use Case"
        ],
        "description": "Returns the name of the use case",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        }
      }
    },
    "/namespaces": {
      "get": {
        "tags": [
          "Use case"
        ],
        "description": "Returns a list of the available namespaces for this use case",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        }
      }
    },
    "/entity_types": {
      "get": {
        "tags": [
          "Use case"
        ],
        "description": "Returns a list of the possible entity types for this use case",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        }
      }
    },
    "/db_manager/test_connection": {
      "get": {
        "tags": [
          "Status"
        ],
        "description": "Returns message showing whether connection to Neo4j Database is made successful",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful database connectivity"
          },
          "503": {
            "description": "Unsuccessful database connectivity"
          }
        }
      }
    },
    "/db_manager/statistics": {
      "get": {
        "tags": [
          "Retrieval"
        ],
        "description": "Returns the number of nodes and edges per type",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A dictionary of nodes and edge types together with their count",
            "schema": {
              "$ref": "#/definitions/statistics"
            }
          },
          "400": {
            "description": "Invalid request data"
          },
          "503": {
            "description": "Unsuccessful database connectivity"
          }
        }
      }
    },
    "/db_manager/time_span": {
      "get": {
        "tags": [
          "Retrieval"
        ],
        "description": "Returns the covered time span available in the data",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A dictionary of min_time and max_time together with their timestamp",
            "schema": {
              "$ref": "#/definitions/time_span"
            }
          },
          "400": {
            "description": "Invalid request data"
          },
          "503": {
            "description": "Unsuccessful database connectivity"
          }
        }
      }
    },
    "/db_manager/records_time_span": {
      "get": {
        "tags": [
          "Retrieval"
        ],
        "description": "Returns the covered time span available in the raw record data",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A dictionary of min_time and max_time together with their timestamp",
            "schema": {
              "$ref": "#/definitions/time_span"
            }
          },
          "400": {
            "description": "Invalid request data"
          },
          "503": {
            "description": "Unsuccessful database connectivity"
          }
        }
      }
    },
    "/db_manager/logs": {
      "get": {
        "tags": [
          "Retrieval"
        ],
        "description": "Returns a list of the imported logs",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of imported logs",
            "schema": {
              "$ref": "#/definitions/logs"
            }
          },
          "400": {
            "description": "Invalid request data"
          },
          "503": {
            "description": "Unsuccessful database connectivity"
          }
        }
      }
    },
    "/db_manager/stations": {
      "get": {
        "tags": [
          "Retrieval"
        ],
        "description": "Returns the station ids for given station types.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "station_types",
            "in": "query",
            "description": "list of station types for which station ids are requested. If station_types is None, then all station ids are requested.",
            "required": false,
            "type": "string",
            "default": "['source', 'process']"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of station ids for the given station types"
          },
          "400": {
            "description": "Invalid request data. Given entity type is not supported"
          },
          "503": {
            "description": "Unsuccessful database connectivity"
          }
        }
      }
    },
    "/db_manager/eventlog/{entity_type}": {
      "get": {
        "tags": [
          "Retrieval"
        ],
        "description": "Returns an event log for the given entity type. Please note that the response is quite large, so not recommended to run in Swagger UI. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "entity_type",
            "in": "path",
            "description": "entity type for which event log is requested",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An event log for the given entity type"
          },
          "400": {
            "description": "Invalid request data. Given entity type is not supported"
          },
          "503": {
            "description": "Unsuccessful database connectivity"
          }
        }
      }
    },
    "/db_manager/clear_db": {
      "post": {
        "tags": [
          "Manage Database - SKG Manager"
        ],
        "description": "Clears the Neo4j database",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Database successfully cleared"
          },
          "503": {
            "description": "Unsuccessful database connectivity"
          }
        }
      }
    },
    "/oced_pg/load": {
      "post": {
        "tags": [
          "OCED-PG - SKG Manager"
        ],
        "description": "Retrieve data from Common Data Space and Load as (:Record) nodes into Neo4j Database",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "is_simulation_data",
            "in": "query",
            "description": "is the data to be loaded ground truth data (false) or simulation data (true)",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "namespace",
            "in": "query",
            "description": "namespace of the common data space",
            "required": false,
            "type": "string"
          },
          {
            "name": "drop_rows",
            "in": "query",
            "description": "Value indicating how inconsistent data should be handled. If drop_rows is true, then a record with incorrect data types is dropped. If drop_rows is false, then incorrect data types are replaced by null (default behavior).",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Records successfully loaded into Neo4j Database"
          },
          "503": {
            "description": "Unsuccessful database connectivity"
          }
        }
      }
    },
    "/oced_pg/transform": {
      "post": {
        "tags": [
          "OCED-PG - SKG Manager"
        ],
        "description": "Transform (:Record) nodes using Semantic Header into System Knowledge Graph",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "is_simulation_data",
            "in": "query",
            "description": "is the data to be loaded ground truth data (false) or simulation data (true)",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "entity_types",
            "in": "query",
            "description": "list of entity types to be loaded",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "the start time of the timespan",
            "required": false,
            "type": "string",
            "default": "1970-01-01"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "the end time of the timespan",
            "required": false,
            "type": "string",
            "default": "2970-01-01"
          }
        ],
        "responses": {
          "200": {
            "description": "Records successfully transformed into Neo4j Database"
          },
          "503": {
            "description": "Unsuccessful database connectivity"
          }
        }
      }
    },
    "/oced_pg/clean": {
      "post": {
        "tags": [
          "OCED-PG - SKG Manager"
        ],
        "description": "Clean transformed data in the System Knowledge Graph",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "is_simulation_data",
            "in": "query",
            "description": "is the data to be cleaned ground truth data (false) or simulation data (true)",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Records successfully cleaned"
          },
          "503": {
            "description": "Unsuccessful database connectivity"
          }
        }
      }
    },
    "/oced_pg/delete_simulated_data": {
      "post": {
        "tags": [
          "Manage Database - SKG Manager"
        ],
        "description": "Delete simulated data (their :Record nodes and all created nodes)",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Simulation data successfully deleted from Neo4j Database"
          },
          "503": {
            "description": "Unsuccessful database connectivity"
          }
        }
      }
    },
    "/performance/run": {
      "post": {
        "tags": [
          "Performance"
        ],
        "description": "Runs the performance",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        }
      }
    },
    "/performance/get_ecdf_types": {
      "get": {
        "tags": [
          "Performance"
        ],
        "description": "Retrieves the ecdf types present in the graph",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
        ],
        "responses": {
          "200": {
            "description": "A list of ecdf types present in the database"
          },
          "503": {
            "description": "Unsuccessful database connectivity"
          }
        }
      }
    },
    "/performance/get_metric_names": {
      "get": {
        "tags": [
          "Performance"
        ],
        "description": "Retrieves the metric names and the optimization direction of the calculated measures per ecdf type",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
           {
            "name": "ecdf_type",
            "in": "query",
            "description": "the ecdf type for which the metric names should be retrieved",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of metric names and their optimization direction is given for the ecdf type"
          },
          "503": {
            "description": "Unsuccessful database connectivity"
          }
        }
      }
    },
    "/performance/get_mean_metric_results": {
      "get": {
        "tags": [
          "Performance"
        ],
        "description": "Retrieves the mean metrics per ecdf_type",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ecdf_type",
            "in": "query",
            "description": "the ecdf type for which the metrics should be retrieved",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of metric values is given for the ecdf type"
          },
          "503": {
            "description": "Unsuccessful database connectivity"
          }
        }
      }
    }
  },
  "definitions": {
    "statistics": {
      "type": "object",
      "properties": {
        "edgeCount": {
          "type": "integer",
          "description": "The number of edges present in the graph",
          "example": 2970000
        },
        "nodeCount": {
          "type": "integer",
          "description": "The number of nodes present in the graph",
          "example": 536012
        },
        "nodes": {
          "type": "array",
          "description": "A list describing the number of nodes per type",
          "items": {
            "type": "object",
            "properties": {
              "label": {
                "type": "string",
                "description": "the first label of the nodes",
                "example": "Event"
              },
              "count": {
                "type": "integer",
                "description": "the number of nodes for that label",
                "example": 241000
              }
            }
          }
        },
        "edges": {
          "type": "array",
          "description": "A list describing the number of nodes per type",
          "items": {
            "type": "object",
            "properties": {
              "label": {
                "type": "string",
                "description": "the edge type",
                "example": "DF"
              },
              "count": {
                "type": "integer",
                "description": "the number of edges for that type",
                "example": 560000
              }
            }
          }
        }
      }
    },
    "time_span": {
      "type": "object",
      "properties": {
        "start_date": {
          "type": "string",
          "description": "The minimum time present in the graph",
          "example": "2024-01-29"
        },
        "end_date": {
          "type": "string",
          "description": "The maximum time present in the graph",
          "example": "2024-02-25"
        }
      }
    },
    "logs": {
      "type": "array",
      "description": "A list with strings of the imported logs",
      "items": {
        "type": "string",
        "description": "Log name",
        "example": "P10 Entrada de material.csv"
      }
    }
  }
}